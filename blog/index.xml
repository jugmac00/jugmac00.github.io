<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Blogs on Jürgen Gmach</title><link>https://jugmac00.github.io/blog/</link><description>Recent content in Blogs on Jürgen Gmach</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 16 Apr 2022 15:40:58 +0200</lastBuildDate><atom:link href="https://jugmac00.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>getattr() Considered Harmful</title><link>https://jugmac00.github.io/blog/getattr-considered-harmful/</link><pubDate>Sat, 16 Apr 2022 15:40:58 +0200</pubDate><guid>https://jugmac00.github.io/blog/getattr-considered-harmful/</guid><description>While Hynek already thought in 2016 that &amp;ldquo;Considered Harmful&amp;rdquo; was getting old, and so he named this blog post hasattr() – A Dangerous Misnomer, instead of hasattr() considered harmful, meanwhile it is 2022 and I still like that phrase.
So here we go&amp;hellip;
getattr() considered harmful The setting is a CLI application with 100% test coverage, and even branch coverage is activated.
coverage 101 I assume you know what coverage is.</description></item><item><title>Testing Argparse Applications - the Better Way</title><link>https://jugmac00.github.io/blog/testing-argparse-applications-the-better-way/</link><pubDate>Tue, 30 Nov 2021 17:07:22 +0100</pubDate><guid>https://jugmac00.github.io/blog/testing-argparse-applications-the-better-way/</guid><description>When you are creating command line applications in Python, you probably heard of argparse, which is a great library for exactly doing this, and it is even included in Python&amp;rsquo;s standard library.
Imagine you have created the following argparse application:
&amp;lt;main.py&amp;gt;
import argparse def main(): parser = argparse.ArgumentParser() parser.add_argument('--name', required=True) args = parser.parse_args() print(f'Hello {args.name}') if __name__ == '__main__': sys.exit(main()) Looks straightforward, works great, but at one point, you certainly want to add tests for it, right?</description></item><item><title>Combine Coverage for Different Python Versions</title><link>https://jugmac00.github.io/blog/combine-coverage-for-different-python-versions/</link><pubDate>Sun, 21 Nov 2021 15:34:38 +0100</pubDate><guid>https://jugmac00.github.io/blog/combine-coverage-for-different-python-versions/</guid><description>Is it enough to run code coverage for a single Python version?
Probably, but not necessarily.
Especially when you still need to support Python 2.7 (sigh), there could be quite some different code paths for Python 2 and Python 3.
A simple example&amp;hellip;
try: import Queue # Python 2 except ImportError: import queue as Queue # Python 3 But also the different Python 3 versions may require that you not only test your code for each interpreter, but also you need to assess code coverage for the different versions, and certainly you want to make sure you got all paths covered.</description></item><item><title>Bye-Bye python-memcached, hello pymemcache</title><link>https://jugmac00.github.io/blog/bye-bye-python-memcached-hello-pymemcache/</link><pubDate>Tue, 09 Nov 2021 11:40:26 +0100</pubDate><guid>https://jugmac00.github.io/blog/bye-bye-python-memcached-hello-pymemcache/</guid><description>For one app that I help maintaining I noticed that python-memcached was used, which has not been updated in several years.
There were some efforts to transfer python-memcached to a new maintainer, but at the end that did not work out.
So, the project is dead.
While an unmaintained project may currently work, there are several things to consider:
there may be bugs which do not get fixed there may be security issues which do not get fixed it may stop working for e.</description></item><item><title>Migrate a Repository From Bazaar to Git</title><link>https://jugmac00.github.io/blog/migrate-a-repository-from-bazaar-to-git/</link><pubDate>Fri, 05 Nov 2021 00:05:09 +0200</pubDate><guid>https://jugmac00.github.io/blog/migrate-a-repository-from-bazaar-to-git/</guid><description>Bazaar is a distributed version control system (VCS), developed by Canonical.
For a long time, Bazaar was the only supported VCS on Launchpad.
Launchpad is a code hosting platform, similar to the now prevalent GitHub, and while open to the public, nowadays it is mostly used by Canonical itself and many other individuals and companys to manage the whole lifecycle of creating packages for Ubuntu and its distributions.
Since quite some time also git is a supported VCS on Launchpad.</description></item><item><title>GPG - All I Need to Know</title><link>https://jugmac00.github.io/blog/gpg-all-i-need-to-know/</link><pubDate>Thu, 22 Jul 2021 16:40:59 +0200</pubDate><guid>https://jugmac00.github.io/blog/gpg-all-i-need-to-know/</guid><description>While I need to use GPG pretty regularly, I always have to look up the commands - they just don&amp;rsquo;t stick :-)
Over the last couple of months I collected every command I had to use. Enjoy!
encrypt a file gpg --encrypt --recipient someone@example.com filename decrypt a file gpg --decrypt -outfile filename filename.gpg show all local keys gpg --list-keys search and add a new key gpg --keyserver keys.openpgp.org --search-key someone@example.com import a public key from the file system gpg --import key.</description></item><item><title>Enrich Test Coverage With Contexts</title><link>https://jugmac00.github.io/blog/enrich-test-coverage-with-contexts/</link><pubDate>Thu, 20 May 2021 14:22:51 +0200</pubDate><guid>https://jugmac00.github.io/blog/enrich-test-coverage-with-contexts/</guid><description>Hold on tight, now I expect a lot of us:
We all
test our code use coverage strive for 100% test coverage So, what&amp;rsquo;s missing?
I miss some context 100% test coverage is great, but sometimes we need more information.
e.g. which test covers line XXX?
In sufficiently complex code bases, with mixed unit and integration tests, this is no longer easy to find out.
Sure, you can set a breakpoint and run your tests and wait until the breakpoint has been hit.</description></item><item><title>Hugo and GitHub Pages - Welcome in the Land of Confusion</title><link>https://jugmac00.github.io/blog/hugo-and-github-pages-welcome-in-the-land-of-confusion/</link><pubDate>Wed, 12 May 2021 10:31:30 +0200</pubDate><guid>https://jugmac00.github.io/blog/hugo-and-github-pages-welcome-in-the-land-of-confusion/</guid><description>Yesterday, I migrated my blog to Hugo.
GitHub Pages While the migration was straight forward, I was a bit puzzled with the deployment process to GitHub.
For those who don&amp;rsquo;t know yet, GitHub enables all users to have an own website, called GitHub Pages, with a URL like https://your-user-name.github.io.
Previously I used Lektor. The source code for my site lived in https://github.com/jugmac00/jugmac00.github.io.source, and was deployed by Lektor to https://github.com/jugmac00/jugmac00.github.io.
Easy enough.</description></item><item><title>Bite My Shiny Type Annotated Library</title><link>https://jugmac00.github.io/blog/bite-my-shiny-type-annotated-library/</link><pubDate>Sun, 09 May 2021 15:40:11 +0200</pubDate><guid>https://jugmac00.github.io/blog/bite-my-shiny-type-annotated-library/</guid><description>How do you make type annotations available to the users of your library?
Well, you just type annotate your library, right?
No!
But let&amp;rsquo;s step back for a moment.
Flask 2.0 goes full type annotations This morning I read David Lord&amp;rsquo;s announcement that Flask, Jinja, Click, Werkzeug, MarkupSafe, and ItsDangerous are now fully type annotated, and new releases will be available next week.
Ok, as I typed Flask-Reuploaded almost a year ago, I certainly noticed that Flask was not typed back then, but external type information was provided via typeshed, which I remember lively, as I had to add a missing type annotation for Werkzeug.</description></item><item><title>Testing the tox 4 Pre-Release at Scale</title><link>https://jugmac00.github.io/blog/testing-the-tox-4-pre-release-at-scale/</link><pubDate>Mon, 01 Mar 2021 15:31:06 +0200</pubDate><guid>https://jugmac00.github.io/blog/testing-the-tox-4-pre-release-at-scale/</guid><description>Every once in a while, you may read that one of your favorite used packages announces a new version.
Sometimes even a so-called alpha version is announced.
The maintainers then politely ask you, the user, to test the package, and give feedback if anything is broken.
When the upcoming pytest version 6 had been announced, I wrote a short instruction on how to install pre-releases.
This time, tox, the virtualenv management and test tool, announced a new version 4, but it is not just a new version, it is a complete rewrite by Bernát Gábor!</description></item><item><title>Convincing an Enterprisy App to Work Behind nginx as Reverse Proxy</title><link>https://jugmac00.github.io/blog/convincing-an-enterprisy-app-to-work-behind-nginx-as-reverse-proxy/</link><pubDate>Fri, 30 Oct 2020 15:26:14 +0200</pubDate><guid>https://jugmac00.github.io/blog/convincing-an-enterprisy-app-to-work-behind-nginx-as-reverse-proxy/</guid><description>For simplicity, let&amp;rsquo;s the call the app Dated HR, a tool to &amp;ldquo;Simplify your HR work&amp;rdquo;, which offers support for time tracking, holiday, payroll&amp;hellip;
So far so good, and even better, as it is an enterprisy Windows software, which needs to be configured with IIS and a MSSQL database, a colleague of mine installed it on an internal Windows server.
The app makes a web GUI available under http://nemesis.company.local, which would work like a charm - for our colleagues at site, but not for the colleagues from the other sites.</description></item><item><title>How to Run a Dockerized Service via systemd</title><link>https://jugmac00.github.io/blog/how-to-run-a-dockerized-service-via-systemd/</link><pubDate>Thu, 29 Oct 2020 15:18:40 +0200</pubDate><guid>https://jugmac00.github.io/blog/how-to-run-a-dockerized-service-via-systemd/</guid><description>Until recently, I saw no good reason to use Docker, as my deployment tool of choice produces approximately identical builds, locally on my Ubuntu laptop, on staging and on production.
But time does not stand still and especially as I have to deploy a Java application, it was time to rethink my strategy, as I do not want to play the which Java runtime environment plays nicely together with which app version game.</description></item><item><title>How to Create Hundreds of Pull Requests With a Single Command</title><link>https://jugmac00.github.io/blog/how-to-create-hundreds-of-pull-requests-with-a-single-command/</link><pubDate>Wed, 28 Oct 2020 15:02:44 +0200</pubDate><guid>https://jugmac00.github.io/blog/how-to-create-hundreds-of-pull-requests-with-a-single-command/</guid><description>.. or &amp;ldquo;How to win #hacktoberfest&amp;rdquo;?
Seriously&amp;hellip;
#hacktoberfest is no longer cool ( Hacktoberfest is Hurting Open Source ) you cannot win it anyway the mass pull requests I created (see below) went all to repositories, which do not take part at #hacktoberfest note If you are not interested in the story behind, I also created a concise &amp;ldquo;today-I-learned&amp;rdquo; post.
prologue The company I work for has been using Zope, the grand-daddy of Python web application servers, for more than 15 years.</description></item><item><title>Flask Reuploaded</title><link>https://jugmac00.github.io/blog/flask-reuploaded/</link><pubDate>Sun, 28 Jun 2020 14:27:13 +0200</pubDate><guid>https://jugmac00.github.io/blog/flask-reuploaded/</guid><description>It all started with this error message:
File &amp;#34;/Projects/xxx/venv/lib/python3.7/site-packages/flask_uploads.py&amp;#34;, line 26, in &amp;lt;module&amp;gt; from werkzeug import secure_filename, FileStorage ImportError: cannot import name &amp;#39;secure_filename&amp;#39; from &amp;#39;werkzeug&amp;#39;&amp;#39; Trying to build my Flask application, the above error message was generated, as Werkzeug, a very important library in the Flask ecosystem, changed its API in version 1.0, back in February 2020.
This broke a lot of plugins.
Twitter thread
As my app relies on Flask-Uploads, I had a look at the problem and finally provided a pull request to the Flask-Uploads repository on GitHub.</description></item><item><title>Log Rotation for Python Applications - Without killing them softly</title><link>https://jugmac00.github.io/blog/log-rotation-for-python-applications/</link><pubDate>Wed, 08 Apr 2020 14:20:11 +0200</pubDate><guid>https://jugmac00.github.io/blog/log-rotation-for-python-applications/</guid><description>A couple of days after a successful deployment of my Zope 4 application, I noticed something worrisome.
Zope gets killed every night, shortly after midnight.
I use Supervisor, which monitors the process and restarts it, so that&amp;rsquo;s not the problem.
But there are two problems:
I did not trigger this on purpose. The cache of my app is cold, that means that my colleagues get slow response times for the first queries in the morning.</description></item><item><title>isort and pre-commit - a friendship with obstacles</title><link>https://jugmac00.github.io/blog/isort-and-pre-commit-a-friendship-with-obstacles/</link><pubDate>Sun, 23 Feb 2020 14:06:45 +0200</pubDate><guid>https://jugmac00.github.io/blog/isort-and-pre-commit-a-friendship-with-obstacles/</guid><description>Note This post is not intended to be an exhaustive introduction to pre-commit and its hooks. Please visit pre-commit.com for a complete documentation.
In a nutshell&amp;hellip;
pre-commit From its website:
A framework for managing and maintaining multi-language pre-commit hooks.
Very simplified this means, whenever you try to commit changes in your project (e.g. entering git commit), pre-commit runs all configured tools (e.g. linter, formatter, &amp;hellip;), and only if they run successfully, your commit will be executed - otherwise your commit will fail.</description></item><item><title>Three Ways to Get Into Trouble or Welcome Back PageTemplateEngine</title><link>https://jugmac00.github.io/blog/three-ways-to-get-into-trouble-or-welcome-back-pagetemplateengine/</link><pubDate>Tue, 26 Nov 2019 13:58:44 +0200</pubDate><guid>https://jugmac00.github.io/blog/three-ways-to-get-into-trouble-or-welcome-back-pagetemplateengine/</guid><description>The web application server Zope has a very long history which dates back to the late &amp;rsquo;90s.
Quoting Martijn Faassen:
Zope must be one of the oldest Python codebases in the world that is still used outside the standard library.
During its many years of existence the way a view gets rendered has changed.
Basically there are two supported template mechanisms:
Document Template Markup Language (DTML) Zope Page Templates (ZPT) DTML is pretty much outdated for more than a decade, but still in use for the Zope Management Interface.</description></item><item><title>Am I Famous</title><link>https://jugmac00.github.io/blog/am-i-famous/</link><pubDate>Wed, 29 May 2019 13:45:09 +0200</pubDate><guid>https://jugmac00.github.io/blog/am-i-famous/</guid><description>A couple of months ago, Brett Cannon, one of the better known Python core developers, announced on Twitter that he contributed to over 100 open source projects.
first reaction Woohah! Congratulations!
second reaction How did he know?
Everytime I get a PR merged I record the repo&amp;rsquo;s URL for a tool I created to analyze my contributions to OSS.
Ah&amp;hellip; k. I did not do that.
third reaction To how many open source projects did I contribute?</description></item><item><title>PyConWeb 2019: Came for the talks, stayed for the raffles</title><link>https://jugmac00.github.io/blog/pyconweb-2019/</link><pubDate>Mon, 27 May 2019 13:39:09 +0200</pubDate><guid>https://jugmac00.github.io/blog/pyconweb-2019/</guid><description>summary of pyconweb 2019 F&amp;hellip; awesome!
talks and workshops I tried to collect all slides from Twitter and Telegram - in case I missed some, please drop me a line @jugmac00.
Saturday, 25 May 2019 Building robust APIs Tornado Web Services on AsyncIO Bocadillo, or how I built an open source async web framework slides@Dropbox | slides@Github Introduction to GraphQL and Graphene source Hello to the World in 8 Web Frameworks slides and video @aaronbassett Life without passwords The dos and don&amp;rsquo;ts of task queues An introduction to D3.</description></item><item><title>Chrome No Longer Shows Saved Passwords</title><link>https://jugmac00.github.io/blog/chrome-no-longer-shows-saved-passwords/</link><pubDate>Fri, 10 May 2019 13:35:01 +0200</pubDate><guid>https://jugmac00.github.io/blog/chrome-no-longer-shows-saved-passwords/</guid><description>Concerning security and privacy, you either can get stalled because you can&amp;rsquo;t get it perfect right from the beginning, or you improve over time.
I prefer the latter one. And concerning password security I go with Troy Hunt: Password managers don&amp;rsquo;t have to be perfect, they just have to be better than not having one.
And actually the password manager of a browser is already a password manager. I would not use it for very important passwords, but it is absolutely fine for those dozens of dozens forum logins and so on.</description></item><item><title>Recap Day Three and Wrap Up of Zope Spring Cleaning</title><link>https://jugmac00.github.io/blog/recap-day-three-and-wrap-up-of-zope-spring-cleaning/</link><pubDate>Fri, 10 May 2019 13:27:31 +0200</pubDate><guid>https://jugmac00.github.io/blog/recap-day-three-and-wrap-up-of-zope-spring-cleaning/</guid><description>This blog post is work in progress&amp;hellip; much more to come - but the train is only 10 minutes late (uncommon in Germany :-) ), so I am not able finish the blog post now (narrator: he never has updated and never will update this blog post).
tl/dr - what a ride! today there was the final release of Zope 4! see blog post @gocept Michael / @gocept announced the roadmap for Zope 2.</description></item><item><title>Recap Day Two of Zope Spring Cleaning</title><link>https://jugmac00.github.io/blog/recap-day-two-of-zope-spring-cleaning/</link><pubDate>Fri, 10 May 2019 13:22:15 +0200</pubDate><guid>https://jugmac00.github.io/blog/recap-day-two-of-zope-spring-cleaning/</guid><description>Very brief recap, as I want to spend the remaining time with some more documentation updates.
progress Jens Hinghaus Fix bug in ZMI search improve tempstorage fix Steffen finished the documentation for the Nonsensical path issue had some fun with getting AppVeyor up and running for Zope Daniel fixed a bug in ZCatalog (sorting did not work); migrated a DTML template to zpt Jeremy continued his work on zc.</description></item><item><title>Recap day one of "Zope spring cleaning"</title><link>https://jugmac00.github.io/blog/recap-of-the-first-day-of-saltlabs-sprint-zope-spring-cleaning/</link><pubDate>Thu, 09 May 2019 13:14:12 +0200</pubDate><guid>https://jugmac00.github.io/blog/recap-of-the-first-day-of-saltlabs-sprint-zope-spring-cleaning/</guid><description>More infos about the sprint
10 local sprinters 2 remote sprinters (Jens Vagelpohl and Dieter Maurer) progress Steffen had lots of fun with Nonsensical Path Infos had a look at some of the open documentation tickets Jens Klein / Martin Häcker created a pull request to improve the zodpupdate script created / extracted plone/zodbverify which can be used to check ZODB before the Python 2 -&amp;gt; 3 migration Jeremy worked on porting recipe.</description></item><item><title>Face to face with "Earl Zope and his henchmen"</title><link>https://jugmac00.github.io/blog/face-to-face-with-earl-zope/</link><pubDate>Fri, 03 May 2019 12:48:11 +0200</pubDate><guid>https://jugmac00.github.io/blog/face-to-face-with-earl-zope/</guid><description>This blog post tries to ease beginning and keeping up with the development of the open source web application server Zope and its universe.
what makes it hard to start contributing Zope is a very mature product, as it was launched already back in 1999 Zope underwent some major architectural changes (keyword ZCA) Zope itself is relatively complex there is also a complex development ecosystem around it Buildout TravisCI (as of 2021, Travis is no longer used, but GHA) GitHub.</description></item><item><title>it's never too late to join the party!</title><link>https://jugmac00.github.io/blog/it-is-never-too-late-too-join-the-party/</link><pubDate>Thu, 02 May 2019 11:50:14 +0200</pubDate><guid>https://jugmac00.github.io/blog/it-is-never-too-late-too-join-the-party/</guid><description>Although I started writing code already at the age of 13 (generation C64), and I am a professional web and backend developer since 2007, I only started contributing to open source software quite recently - apart from the occasional bug report.
what is open source software? Quote from Wikipedia:
Open-source software (OSS) is a type of computer software in which source code is released under a license in which the copyright holder grants users the rights to study, change, and distribute the software to anyone and for any purpose.</description></item><item><title>ignore requests for apple touch icons</title><link>https://jugmac00.github.io/blog/ignore-requests-for-apple-touch-icons/</link><pubDate>Sat, 28 Jul 2018 11:38:38 +0200</pubDate><guid>https://jugmac00.github.io/blog/ignore-requests-for-apple-touch-icons/</guid><description>the problem My application&amp;rsquo;s error log is polluted with tracebacks of notFoundErrors from Apple browsers requesting apple-touch-icon.pngs.
For those, who do not know&amp;hellip; Touch icons are to Apple&amp;rsquo;s mobile devices what favicons are to (desktop) web browsers.
According to ComputerHope:
When someone bookmarks your web page or adds your web page to their home screen, this icon is used.
So, when you run a public website, no question, you want to put some effort into making some great icons, so your website looks great on your users' home screen and bookmark section.</description></item><item><title>sudo dnf install beautiful-problems</title><link>https://jugmac00.github.io/blog/sudo-dnf-install-beautiful-problems/</link><pubDate>Wed, 04 Jul 2018 11:16:23 +0200</pubDate><guid>https://jugmac00.github.io/blog/sudo-dnf-install-beautiful-problems/</guid><description>There is something I immediately disliked when using Fedora the first time - the bash prompt.
For many years I&amp;rsquo;ve been using a fixed prompt at work for all my machines, a beauty in green and yellow&amp;hellip;
And when I first started bash after installing Fedora on my home laptop, I encountered this grey monotony&amp;hellip;
[jugmac00@localhost ~]$ I did not try to recreate the prompt I have at work, but I wanted to try something new - and oh my zsh, ah, oh my god, zsh did not come to my mind - yuck!</description></item><item><title>getting back ctrl over ctrl+alt+arrow in gnome</title><link>https://jugmac00.github.io/blog/getting-back-ctrl-over-ctrlaltarrow-keys/</link><pubDate>Sun, 01 Jul 2018 10:47:28 +0200</pubDate><guid>https://jugmac00.github.io/blog/getting-back-ctrl-over-ctrlaltarrow-keys/</guid><description>the task Deactivating Gnome&amp;rsquo;s keyboard shortcuts for ctrl+alt+left / ctrl+alt+right to make those combinations available for another application.
In my case I tried to use these shortcuts in Jetbrain&amp;rsquo;s PyCharm for code navigation.
the obvious (and wrong) way Go to Settings Devices Keyboard Keyboard Shortcuts Change or reset the values for the shortcuts Although both shortcuts are obviously blocked by Gnome, they are not listed.</description></item></channel></rss>