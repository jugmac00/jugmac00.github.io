<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>bash on Jürgen Gmach</title><link>https://jugmac00.github.io/tags/bash/</link><description>Recent content in bash on Jürgen Gmach</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 29 Apr 2021 18:48:26 +0200</lastBuildDate><atom:link href="https://jugmac00.github.io/tags/bash/index.xml" rel="self" type="application/rss+xml"/><item><title>How to Run a Bash Script in a Sane Way</title><link>https://jugmac00.github.io/til/how-to-run-a-bash-script-in-a-sane-way/</link><pubDate>Thu, 29 Apr 2021 18:48:26 +0200</pubDate><guid>https://jugmac00.github.io/til/how-to-run-a-bash-script-in-a-sane-way/</guid><description>When you never had problems with running/debugging a bash script, you might wonder what I am talking about.
Instead of introducing the possible problems, and then the way to counter them, let&amp;rsquo;s start with the solution.
All your bash scripts should probably start with&amp;hellip;
#!/usr/bin/env bash &amp;hellip; wait&amp;hellip; it goes on&amp;hellip;
set -euxo pipefail Wat? Ok, let&amp;rsquo;s go through the options, one by one.
set -e This makes a bash script to stop on error immediately, and exit.</description></item></channel></rss>