<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Flask on Jürgen Gmach</title><link>https://jugmac00.github.io/tags/flask/</link><description>Recent content in Flask on Jürgen Gmach</description><generator>Hugo -- 0.127.0</generator><language>en-us</language><lastBuildDate>Wed, 11 Aug 2021 13:17:09 +0200</lastBuildDate><atom:link href="https://jugmac00.github.io/tags/flask/index.xml" rel="self" type="application/rss+xml"/><item><title>How to Surround Highlighted Text With a Custom Snippet</title><link>https://jugmac00.github.io/til/how-to-surround-highligted-text-with-a-custom-snippet/</link><pubDate>Wed, 11 Aug 2021 13:17:09 +0200</pubDate><guid>https://jugmac00.github.io/til/how-to-surround-highligted-text-with-a-custom-snippet/</guid><description>In order to mark strings as &amp;ldquo;translatable&amp;rdquo; in Flask via Flask-WTF, you need to apply a special syntax.
This means, e.g. in a Jinja template a string like Conference has to be transformed into {{ _('Conference') }}.
This is a very tedious work, so I created a shortcut for it.
Add the following lines to your keybindings.json:
&amp;quot;key&amp;quot;: &amp;quot;ctrl+shift+alt+0&amp;quot;, &amp;quot;command&amp;quot;: &amp;quot;editor.action.insertSnippet&amp;quot;, &amp;quot;when&amp;quot;: &amp;quot;editorHasSelection || editorHasMultipleSelections&amp;quot;, &amp;quot;args&amp;quot;: { &amp;quot;snippet&amp;quot;: &amp;quot;{{ _('${TM_SELECTED_TEXT}') }}&amp;quot; } I used &amp;ldquo;ctrl+shift+alt+0&amp;rdquo; as on keyboard with a German layout the closing curly brace is on the same key as the 0.</description></item><item><title>How Long Does Flask Keep User Generated Data</title><link>https://jugmac00.github.io/til/how-long-does-flask-keep-user-generated-data/</link><pubDate>Fri, 04 Sep 2020 22:06:32 +0200</pubDate><guid>https://jugmac00.github.io/til/how-long-does-flask-keep-user-generated-data/</guid><description>Easy!
Either Flask persists the data into a database or a file, or it does not.
Wait, not so fast. There is also
session scoped data (e.g. storing data in a cookie or similar) app scoped data (e.g. store data on the app object) The caveats
session scoped data is only available for one client, and as long the session lasts app scoped data is only available within a single app - usually, e.</description></item><item><title>How Can You Translate the Login Message of Flask-Login</title><link>https://jugmac00.github.io/til/how-can-you-translate-the-login-message-of-flask-login/</link><pubDate>Fri, 14 Aug 2020 22:19:22 +0200</pubDate><guid>https://jugmac00.github.io/til/how-can-you-translate-the-login-message-of-flask-login/</guid><description>When you use Flask-Login, the default login message comes from the plugin.
This means - you do no set it, you cannot translate it.
solution Set the very same (or a different) message!
login = LoginManager(app) login.login_view = &amp;#39;login&amp;#39; login.login_message = _l(&amp;#39;Please log in to access this page.&amp;#39;) via https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-xiii-i18n-and-l10n</description></item><item><title>How Can You Inject the Language as String Into a Jinja Template</title><link>https://jugmac00.github.io/til/how-can-you-inject-the-language-as-string-into-a-jinja-template/</link><pubDate>Thu, 13 Aug 2020 22:15:25 +0200</pubDate><guid>https://jugmac00.github.io/til/how-can-you-inject-the-language-as-string-into-a-jinja-template/</guid><description>I created a multilingual project using Flask with the help of Flask-Babel.
While the translation mechanism via GNU gettext itself is pretty straightforward, I did not know how to inject the actual language into the Jinja template, so I can use it to set &amp;lt;html lang=&amp;quot;xxx&amp;quot;&amp;gt;.
While it is odd that this is not mentioned in the documentation, once again StackOverflow offered solutions.
solution one Just translate the language!
&amp;lt;html lang=&amp;#34;{{ _(&amp;#39;en&amp;#39;) }}&amp;#34;&amp;gt; That was too simple to think of :-)</description></item></channel></rss>