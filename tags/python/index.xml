<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>python on Jürgen Gmach</title><link>https://jugmac00.github.io/tags/python/</link><description>Recent content in python on Jürgen Gmach</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 22 May 2021 14:02:09 +0200</lastBuildDate><atom:link href="https://jugmac00.github.io/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Variable Scope and List Comprehensions</title><link>https://jugmac00.github.io/til/variable-scope-and-list-comprehensions/</link><pubDate>Sat, 22 May 2021 14:02:09 +0200</pubDate><guid>https://jugmac00.github.io/til/variable-scope-and-list-comprehensions/</guid><description>Python 2 In Python 2 the temporary variable was not so temporary at all&amp;hellip;
❯ python2 Python 2.7.17 (default, Feb 27 2021, 15:10:58) [GCC 7.5.0] on linux2 Type &amp;#34;help&amp;#34;, &amp;#34;copyright&amp;#34;, &amp;#34;credits&amp;#34; or &amp;#34;license&amp;#34; for more information. &amp;gt;&amp;gt;&amp;gt; s = &amp;#34;abc&amp;#34; &amp;gt;&amp;gt;&amp;gt; [x for x in s] [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;] &amp;gt;&amp;gt;&amp;gt; x &amp;#39;c&amp;#39; As you can see, x leaks outside the scope the list comprehension.
Python 3 This has been changed in Python 3.</description></item><item><title>How to Install a Python Package Directly From a Git Branch From GitHub</title><link>https://jugmac00.github.io/til/how-to-install-a-python-package-directly-from-a-git-branch-from-github/</link><pubDate>Mon, 11 Jan 2021 08:55:54 +0200</pubDate><guid>https://jugmac00.github.io/til/how-to-install-a-python-package-directly-from-a-git-branch-from-github/</guid><description>Bernát Gábor is currently working on a complete rewrite for tox.
I alpha-tested the latest release (4.0.0a2), and reported a couple of problems.
Within a day Bernát published some fixes on the rewrite branch, and asked me to test it.
That means there is no new package on PyPI, yet.
So, I had to install tox directly from GitHub, to be exact, from the rewrite branch:
pip install git+https://github.com/tox-dev/tox@rewrite or more general</description></item><item><title>What Is the Difference Between Invoking `pytest` and `python -m pytest`</title><link>https://jugmac00.github.io/til/what-is-the-difference-between-invoking-pytest-and-python-m-pytest/</link><pubDate>Thu, 03 Dec 2020 09:16:51 +0200</pubDate><guid>https://jugmac00.github.io/til/what-is-the-difference-between-invoking-pytest-and-python-m-pytest/</guid><description>Yesterday, I was recommended to have a look at Shopyo - Open inventory management and Point of sales.
As I am passionate about testing and CI, I always have a look at configuration files for newly discovered projects.
After I cloned the repository, I tried to run the tests.
So, without having a look into the documentation ( :-/ ), I
created a virtual env installed the dependencies ran pytest from the root of the project &amp;hellip; and got a ModuleNotFoundError The friendly maintainers of the projects pointed me in the right direction on how to run tests for this project:</description></item><item><title>How to Group Data Easily With Simplenamespace</title><link>https://jugmac00.github.io/til/how-to-group-data-easily-with-simplenamespace/</link><pubDate>Fri, 13 Nov 2020 09:24:27 +0200</pubDate><guid>https://jugmac00.github.io/til/how-to-group-data-easily-with-simplenamespace/</guid><description>While you could use the usual suspects, like a dictionary, a NamedTuple, a dataclass, or even an &amp;ldquo;empty&amp;rdquo; class, there is yet another way: SimpleNamespace.
&amp;gt;&amp;gt;&amp;gt; from types import SimpleNamespace &amp;gt;&amp;gt;&amp;gt; simple_ns = SimpleNamespace(a=1, b=&amp;#34;two&amp;#34;) &amp;gt;&amp;gt;&amp;gt; simple_ns namespace(a=1, b=&amp;#39;two&amp;#39;) &amp;gt;&amp;gt;&amp;gt; simple_ns.a 1 &amp;gt;&amp;gt;&amp;gt; simple_ns.b &amp;#39;two&amp;#39; &amp;gt;&amp;gt;&amp;gt; implementation This builtin is implemented in C, but the Python docs show how it would look like in Python:
class SimpleNamespace: def __init__(self, /, **kwargs): self.</description></item></channel></rss>