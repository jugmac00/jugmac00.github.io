<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>python on Jürgen Gmach</title><link>https://jugmac00.github.io/tags/python/</link><description>Recent content in python on Jürgen Gmach</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 18 Jan 2023 15:35:10 +0100</lastBuildDate><atom:link href="https://jugmac00.github.io/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Your First Contribution to CPython</title><link>https://jugmac00.github.io/blog/your-first-contribution-to-cpython/</link><pubDate>Wed, 18 Jan 2023 15:35:10 +0100</pubDate><guid>https://jugmac00.github.io/blog/your-first-contribution-to-cpython/</guid><description>Do you love Python?
I certainly do.
Have you ever thought how cool it would be to contribute to it?
Sounds scary? It is not!
Python, or more specifically CPython as the reference implementation of the Python programming language is called, is an open source project like any other - nothing magical.
Other resources While there are many great resources out there to prepare you for the first contribution, such as</description></item><item><title>How f-strings Handle Double Curly Braces</title><link>https://jugmac00.github.io/til/how-fstrings-handle-double-curly-braces/</link><pubDate>Tue, 05 Jul 2022 20:03:01 +0200</pubDate><guid>https://jugmac00.github.io/til/how-fstrings-handle-double-curly-braces/</guid><description>Today I was about setting up a test case for parsing a YAML file which is templated with Jinja variables.
Something like this&amp;hellip;
f&amp;#34;&amp;#34;&amp;#34; pipeline: - test jobs: test: package-repositories: - type: apt url: &amp;#34;https://{{auth}}@example.org&amp;#34; &amp;#34;&amp;#34;&amp;#34; My test case failed&amp;hellip;
My Pydantic model, which uses yaml.safe_load under the hood to load the above configuration, returned the URL, even before the value got replaced, as https://{auth}@example.org.
One pair of the double curly braces was stripped away!</description></item><item><title>Ubuntu Versions Cheat Sheet</title><link>https://jugmac00.github.io/blog/ubuntu-versions-cheat-sheet/</link><pubDate>Mon, 27 Jun 2022 11:14:52 +0200</pubDate><guid>https://jugmac00.github.io/blog/ubuntu-versions-cheat-sheet/</guid><description>about versions, names, even more versions and dates
version code name python go debhelper end of standard support eol 16.04 xenial xerus 3.5 ? 9 04/2021 04/2026 18.04 bionic beaver 3.6 ? 11 04/2023 04/2028 20.04 focal fossa 3.8 1.13 + 1.14 12 04/2025 04/2030 22.04 jammy jellyfish 3.10 ? 13 04/2027 04/2032 24.04 noble numbat 3.</description></item><item><title>Conda, Miniconda and 2x Anaconda</title><link>https://jugmac00.github.io/blog/conda-miniconda-and-2x-anaconda/</link><pubDate>Mon, 23 May 2022 15:43:35 +0200</pubDate><guid>https://jugmac00.github.io/blog/conda-miniconda-and-2x-anaconda/</guid><description>While I certainly heard of Conda, Miniconda, and Anaconda before, I only had a vague idea of these terms and what is behind them.
So, let&amp;rsquo;s get the terminology straight.
Conda&amp;hellip; what? Conda Conda is a CLI application which does package, dependency and environment management, not only for Python, but also for other languages.
Anaconda Anaconda is an open-source Python distribution platform.
This is the all-in-one package, containing not only the Conda application, but already many packages which you usually need for a data science project.</description></item><item><title>getattr() Considered Harmful</title><link>https://jugmac00.github.io/blog/getattr-considered-harmful/</link><pubDate>Sat, 16 Apr 2022 15:40:58 +0200</pubDate><guid>https://jugmac00.github.io/blog/getattr-considered-harmful/</guid><description>While Hynek already considered &amp;ldquo;Considered Harmful&amp;rdquo; was getting old in 2016, and so he named this blog post hasattr() – A Dangerous Misnomer, instead of hasattr() considered harmful, meanwhile it is 2022 and I still like that phrase.
So here we go&amp;hellip;
getattr() considered harmful The setting is a CLI application with 100% test coverage, and even branch coverage is activated.
coverage 101 I assume you know what coverage is. 100% test coverage means that the test suite covers all lines of code of your library or application.</description></item><item><title>Bye-Bye python-memcached, hello pymemcache</title><link>https://jugmac00.github.io/blog/bye-bye-python-memcached-hello-pymemcache/</link><pubDate>Tue, 09 Nov 2021 11:40:26 +0100</pubDate><guid>https://jugmac00.github.io/blog/bye-bye-python-memcached-hello-pymemcache/</guid><description>For one app that I help maintaining I noticed that python-memcached was used, which has not been updated in several years.
There were some efforts to transfer python-memcached to a new maintainer, but at the end that did not work out.
So, the project is dead.
While an unmaintained project may currently work, there are several things to consider:
there may be bugs which do not get fixed there may be security issues which do not get fixed it may stop working for e.</description></item><item><title>Variable Scope and List Comprehensions</title><link>https://jugmac00.github.io/til/variable-scope-and-list-comprehensions/</link><pubDate>Sat, 22 May 2021 14:02:09 +0200</pubDate><guid>https://jugmac00.github.io/til/variable-scope-and-list-comprehensions/</guid><description>Python 2 In Python 2 the temporary variable was not so temporary at all&amp;hellip;
❯ python2 Python 2.7.17 (default, Feb 27 2021, 15:10:58) [GCC 7.5.0] on linux2 Type &amp;#34;help&amp;#34;, &amp;#34;copyright&amp;#34;, &amp;#34;credits&amp;#34; or &amp;#34;license&amp;#34; for more information. &amp;gt;&amp;gt;&amp;gt; s = &amp;#34;abc&amp;#34; &amp;gt;&amp;gt;&amp;gt; [x for x in s] [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;] &amp;gt;&amp;gt;&amp;gt; x &amp;#39;c&amp;#39; As you can see, x leaks outside the scope the list comprehension.
Python 3 This has been changed in Python 3.</description></item><item><title>How to Install a Python Package Directly From a Git Branch From GitHub</title><link>https://jugmac00.github.io/til/how-to-install-a-python-package-directly-from-a-git-branch-from-github/</link><pubDate>Mon, 11 Jan 2021 08:55:54 +0200</pubDate><guid>https://jugmac00.github.io/til/how-to-install-a-python-package-directly-from-a-git-branch-from-github/</guid><description>Bernát Gábor is currently working on a complete rewrite for tox.
I alpha-tested the latest release (4.0.0a2), and reported a couple of problems.
Within a day Bernát published some fixes on the rewrite branch, and asked me to test it.
That means there is no new package on PyPI, yet.
So, I had to install tox directly from GitHub, to be exact, from the rewrite branch:
pip install git+https://github.com/tox-dev/tox@rewrite or more general</description></item><item><title>What Is the Difference Between Invoking `pytest` and `python -m pytest`</title><link>https://jugmac00.github.io/til/what-is-the-difference-between-invoking-pytest-and-python-m-pytest/</link><pubDate>Thu, 03 Dec 2020 09:16:51 +0200</pubDate><guid>https://jugmac00.github.io/til/what-is-the-difference-between-invoking-pytest-and-python-m-pytest/</guid><description>Yesterday, I was recommended to have a look at Shopyo - Open inventory management and Point of sales.
As I am passionate about testing and CI, I always have a look at configuration files for newly discovered projects.
After I cloned the repository, I tried to run the tests.
So, without having a look into the documentation ( :-/ ), I
created a virtual env installed the dependencies ran pytest from the root of the project &amp;hellip; and got a ModuleNotFoundError The friendly maintainers of the projects pointed me in the right direction on how to run tests for this project:</description></item><item><title>How to Group Data Easily With SimpleNamespace</title><link>https://jugmac00.github.io/til/how-to-group-data-easily-with-simplenamespace/</link><pubDate>Fri, 13 Nov 2020 09:24:27 +0200</pubDate><guid>https://jugmac00.github.io/til/how-to-group-data-easily-with-simplenamespace/</guid><description>While you could use the usual suspects, like a dictionary, a NamedTuple, a dataclass, or even an &amp;ldquo;empty&amp;rdquo; class, there is yet another way: SimpleNamespace.
&amp;gt;&amp;gt;&amp;gt; from types import SimpleNamespace &amp;gt;&amp;gt;&amp;gt; simple_ns = SimpleNamespace(a=1, b=&amp;#34;two&amp;#34;) &amp;gt;&amp;gt;&amp;gt; simple_ns namespace(a=1, b=&amp;#39;two&amp;#39;) &amp;gt;&amp;gt;&amp;gt; simple_ns.a 1 &amp;gt;&amp;gt;&amp;gt; simple_ns.b &amp;#39;two&amp;#39; &amp;gt;&amp;gt;&amp;gt; implementation This builtin is implemented in C, but the Python docs show how it would look like in Python:
class SimpleNamespace: def __init__(self, /, **kwargs): self.</description></item><item><title>How to Install Release Candidates</title><link>https://jugmac00.github.io/til/how-to-install-release-candidates/</link><pubDate>Fri, 10 Jul 2020 09:29:55 +0200</pubDate><guid>https://jugmac00.github.io/til/how-to-install-release-candidates/</guid><description>How to install release candidates Today on Twitter, one of the core maintainers of pytest announced the release of pytest 6.0.0rc1, and also asked to install and run it, and report if there are any problems. https://twitter.com/nicoddemus/status/1281385522422784005
Ok, but how do you install a release candidate?
If you just do a pip install pytest, the current latest release gets installed, which is 5.4.3 as the time of writing.
Turns out, there are a couple of options&amp;hellip;</description></item></channel></rss>