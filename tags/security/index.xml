<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>security on Jürgen Gmach</title><link>https://jugmac00.github.io/tags/security/</link><description>Recent content in security on Jürgen Gmach</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 01 Jun 2022 20:38:46 +0200</lastBuildDate><atom:link href="https://jugmac00.github.io/tags/security/index.xml" rel="self" type="application/rss+xml"/><item><title>Oh Open Source Supply Chain Security, Where Art Thou</title><link>https://jugmac00.github.io/blog/oh-open-source-supply-chain-security-where-art-thou/</link><pubDate>Wed, 01 Jun 2022 20:38:46 +0200</pubDate><guid>https://jugmac00.github.io/blog/oh-open-source-supply-chain-security-where-art-thou/</guid><description>&amp;ldquo;This is horrifying. But also not surprising.&amp;rdquo;
These are the words of a friend of mine, a security specialist, when I told him what I found out today.
But first&amp;hellip;
What is Open Source Supply Chain? Most applications nowadays use open source libraries, especially for common functionality like e.g. sending web requests, so it is not necessary to re-invent the wheel all the time.
This is great! This saves a lot of work, time and money, and usually when a library is widely used, it is rock stable.</description></item><item><title>How to Configure a Webserver to Be Less Secure</title><link>https://jugmac00.github.io/til/how-to-configure-a-webserver-to-be-less-secure/</link><pubDate>Thu, 29 Apr 2021 11:43:48 +0200</pubDate><guid>https://jugmac00.github.io/til/how-to-configure-a-webserver-to-be-less-secure/</guid><description>This question sounds odd. Why would you want a less secure web server?
Well, maybe you have to support older clients.
e.g. IE 11 on Windows 8.1 or Java 7 (cough) cannot connect to a web server, which only uses modern and secure ciphers.
From a Java application, which cannot be updated, but has to work, I got the following exception:
Exception in thread &amp;#34;main&amp;#34; javax.net.ssl.SSLHandshakeException: Received fatal alert: handshake_failure at sun.</description></item><item><title>How to Audit and Harden an SSH Client</title><link>https://jugmac00.github.io/til/how-to-audit-and-harden-an-ssh-client/</link><pubDate>Wed, 22 Jul 2020 11:30:28 +0200</pubDate><guid>https://jugmac00.github.io/til/how-to-audit-and-harden-an-ssh-client/</guid><description>You probably know how to harden an SSH server, or at least heard of it.
e.g. do not offer weak ciphers, or do not allow root login&amp;hellip;
But did you know you can and also should harden your SSH client?
step 1 - auditing your SSH client terminal 1 git clone https://github.com/jtesta/ssh-audit cd ssh-audit python3.8 ssh-audit.py -c # c = client audit; this starts a ssh server on port 2222 terminal 2 ssh localhost -p 2222 Now, switch back to terminal 1 and have a look at the output - it all should be green - but it won&amp;rsquo;t.</description></item></channel></rss>