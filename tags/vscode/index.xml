<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>vscode on Jürgen Gmach</title><link>https://jugmac00.github.io/tags/vscode/</link><description>Recent content in vscode on Jürgen Gmach</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 27 Apr 2021 08:51:48 +0200</lastBuildDate><atom:link href="https://jugmac00.github.io/tags/vscode/index.xml" rel="self" type="application/rss+xml"/><item><title>How to Globally Gitignore Configuration Files</title><link>https://jugmac00.github.io/til/how-to-globally-gitignore-configuration-files/</link><pubDate>Tue, 27 Apr 2021 08:51:48 +0200</pubDate><guid>https://jugmac00.github.io/til/how-to-globally-gitignore-configuration-files/</guid><description>Until today, I did not make up my mind about what to do with configuration files, created by e.g. VS Code.
Certainly, I do not want to commit them, but putting it into every&amp;rsquo;s repository .gitignore file is also cumbersome - and sometimes it is not possible.
I always do a git add -u to avoid accidentally adding a venv or similar, so it did not really matter.
Except&amp;hellip;
❯ .</description></item><item><title>How to Avoid Vscode From Causing High Cpu Load When You Have Directories With Many Files</title><link>https://jugmac00.github.io/til/how-to-avoid-vscode-from-causing-high-cpu-load-when-you-have-directories-with-many-files/</link><pubDate>Fri, 26 Mar 2021 13:07:25 +0200</pubDate><guid>https://jugmac00.github.io/til/how-to-avoid-vscode-from-causing-high-cpu-load-when-you-have-directories-with-many-files/</guid><description>Once I opened this one project, CPU load went through the roof and just did not stop.
There is not much source code in the repository, but a lot of build artifacts get generated by it.
I am using VS Code now for quite a while, and especially for this one repository, and I never noticed problems, until recently.
As most of the time extensions are the cause for problems, the VS Code team even provides a kind of bisecting mechanism to help find faulty plugins.</description></item><item><title>How to Count Number of Selected Lines in Vscode</title><link>https://jugmac00.github.io/til/how-to-count-number-of-selected-lines-in-vscode/</link><pubDate>Fri, 29 Jan 2021 13:10:48 +0200</pubDate><guid>https://jugmac00.github.io/til/how-to-count-number-of-selected-lines-in-vscode/</guid><description>Today I wrote a CSV export with many, many columns, where in my Python code each column was calculated on a single line.
So, in order to get the number of columns, I selected all related lines and in the status bar I saw the number of all selected chars! wat?
solutions After some searching on Google and StackOverflow I came to the conclusion&amp;hellip;
Either
a) you have to install an outdated plugin</description></item><item><title>How to Delete Complete Lines With Search Replace</title><link>https://jugmac00.github.io/til/how-to-delete-complete-lines-with-search-replace/</link><pubDate>Wed, 18 Nov 2020 13:21:11 +0200</pubDate><guid>https://jugmac00.github.io/til/how-to-delete-complete-lines-with-search-replace/</guid><description>For many years now, I had been using Jetbrain&amp;rsquo;s IntelliJ Idea Ultimate happily also for my Python development.
Due to &amp;ldquo;legacy issues&amp;rdquo;, I had to apply many # noinspection annotations to my source code.
Now, that I switched to VS Code, I want to get rid of actually 821 # noinspection annotations :-)
A simple search for # noinspection.* and a replacement with basically nothing would work, but that would leave behind many blank lines.</description></item><item><title>How to Deactivate Auto Import in Pylance</title><link>https://jugmac00.github.io/til/how-to-deactivate-auto-import-in-pylance/</link><pubDate>Sat, 06 Jun 2020 09:14:02 +0200</pubDate><guid>https://jugmac00.github.io/til/how-to-deactivate-auto-import-in-pylance/</guid><description>Unfortunately, the auto-import feature in PyLance surprised me with random imports.
e.g. with from unittest.case import expectedFailure just when I typed assert result == expected.
Luckily, the developers heard on the users, and with version 2020.8.0 this &amp;ldquo;feature&amp;rdquo; is optional.
In order to deactivate it, set the following option to false:
python.analysis.autoImportCompletions Thank you, Savannah!</description></item></channel></rss>