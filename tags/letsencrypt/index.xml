<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>letsencrypt on Jürgen Gmach</title><link>https://jugmac00.github.io/tags/letsencrypt/</link><description>Recent content in letsencrypt on Jürgen Gmach</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 06 Jul 2021 09:58:39 +0200</lastBuildDate><atom:link href="https://jugmac00.github.io/tags/letsencrypt/index.xml" rel="self" type="application/rss+xml"/><item><title>How to Patch Java 7 Certificate Store to Support Let's Encrypt</title><link>https://jugmac00.github.io/til/how-to-patch-java-7-certificate-store-to-support-lets-encrypt/</link><pubDate>Tue, 06 Jul 2021 09:58:39 +0200</pubDate><guid>https://jugmac00.github.io/til/how-to-patch-java-7-certificate-store-to-support-lets-encrypt/</guid><description>Do you have to support a very old Java application?
Old as in only runs on 1.7.0_21-b11?
And this application needs to access websites on servers using Let&amp;rsquo;s Encrypt?
Especially after September 2021, when the widespread DST Root CA X3 certificate will expire?
There is help.
keytool to the rescue Oracle kindly provides keytool.
With keytool you can view and manipulate the contents of the Java certificate store, which usually can be found at /lib/security/cacerts within in your Java runtime.</description></item></channel></rss>