<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>git on Jürgen Gmach</title><link>https://jugmac00.github.io/tags/git/</link><description>Recent content in git on Jürgen Gmach</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 12 Feb 2023 10:38:09 +0100</lastBuildDate><atom:link href="https://jugmac00.github.io/tags/git/index.xml" rel="self" type="application/rss+xml"/><item><title>Multiline Commit Messages With `git commit -m</title><link>https://jugmac00.github.io/til/multiline-commit-messages-with-git-commit-m/</link><pubDate>Sun, 12 Feb 2023 10:38:09 +0100</pubDate><guid>https://jugmac00.github.io/til/multiline-commit-messages-with-git-commit-m/</guid><description>When you execute git commit on the command line, your specified editor opens and you can create an expressive title and a longer description.
That is probably nothing new.
You are probably also aware of the shortcut git commit -m &amp;lt;message&amp;gt;, which skips the step with the editor.
But there is only room for the title, right?
Nope, this is not true.
one way It turns out you can use -m multiple times.</description></item><item><title>A Special Tool for Special Occasions: The Git Worktree Command</title><link>https://jugmac00.github.io/blog/the-git-worktree-command/</link><pubDate>Thu, 19 Jan 2023 07:16:27 +0100</pubDate><guid>https://jugmac00.github.io/blog/the-git-worktree-command/</guid><description>What is the issue? Working with branches is fine, as long as you are able to work on one only, or at least have the time to wrap up your work and commit some self-contained and complete state before switching to the next branch.
If you cannot complete your work, it gets messy.
Now, you can either
use git stash create a work-in-progress(WIP) commit just keep the modified or new files, and try to work around them and to not commit them by accident git clone your repository into another directory I have done all of them, and they all have their downsides.</description></item><item><title>How to Apply Git Log and Git Grep Only for a Specific File Type</title><link>https://jugmac00.github.io/til/how-to-apply-git-log-and-git-grep-only-for-a-specific-file-type/</link><pubDate>Fri, 30 Sep 2022 08:13:24 +0200</pubDate><guid>https://jugmac00.github.io/til/how-to-apply-git-log-and-git-grep-only-for-a-specific-file-type/</guid><description>Today I wanted to check how the UPDATE statement was used in already deleted SQL patch files.
Usually I do a git log -p and then use the interactive search in less via /, but in this case there were too many hits from Python files, so I wanted to restrict my search to SQL files only.
Turns out you can pass in the file type via &amp;hellip;
git log -p -- '*sql' And then use the interactive search.</description></item><item><title>How to Update a Force Pushed Remote Branch</title><link>https://jugmac00.github.io/til/how-to-update-a-force-pushed-remote-branch/</link><pubDate>Thu, 10 Mar 2022 16:53:57 +0100</pubDate><guid>https://jugmac00.github.io/til/how-to-update-a-force-pushed-remote-branch/</guid><description>Imagine your colleague works on a new feature, and you have checked out their branch for a local review, and after an initial round of feedback and fixes, your colleague performs a git push --force to the remote branch.
When you just do a git pull, you&amp;rsquo;ll end up in a mess like this&amp;hellip;
$ git pull remote: Enumerating objects: 19, done. remote: Counting objects: 100% (19/19), done. remote: Compressing objects: 100% (11/11), done.</description></item><item><title>Migrate a Repository From Bazaar to Git</title><link>https://jugmac00.github.io/blog/migrate-a-repository-from-bazaar-to-git/</link><pubDate>Fri, 05 Nov 2021 00:05:09 +0200</pubDate><guid>https://jugmac00.github.io/blog/migrate-a-repository-from-bazaar-to-git/</guid><description>Bazaar is a distributed version control system (VCS), developed by Canonical.
For a long time, Bazaar was the only supported VCS on Launchpad.
Launchpad is a code hosting platform, similar to the now prevalent GitHub, and while open to the public, nowadays it is mostly used by Canonical itself and many other individuals and companies to manage the whole lifecycle of creating packages for Ubuntu and its distributions.
Since quite some time also git is a supported VCS on Launchpad.</description></item><item><title>How to Set a New Git Default Branch Name</title><link>https://jugmac00.github.io/til/how-to-set-a-new-git-default-branch-name/</link><pubDate>Tue, 02 Nov 2021 19:08:34 +0100</pubDate><guid>https://jugmac00.github.io/til/how-to-set-a-new-git-default-branch-name/</guid><description>While GitHub&amp;rsquo;s default branch name for newly-created repositories is main since the end of October 2020, what about when you create a new git repository locally?
first things first git made the default branch name configurable in version 2.28 and higher.
So, when you run e.g. Ubuntu 20.04 like me, you may have an older version installed.
Usually, you can&amp;rsquo;t install a newer version without updating the distribution.
But there is hope, you can install a newer git version via a PPA (personal package archive):</description></item><item><title>How to Find Out Which Files Changed Most Often in a Git Repository</title><link>https://jugmac00.github.io/til/how-to-find-out-which-files-changed-most-often-in-a-git-repository/</link><pubDate>Sat, 31 Jul 2021 14:34:02 +0200</pubDate><guid>https://jugmac00.github.io/til/how-to-find-out-which-files-changed-most-often-in-a-git-repository/</guid><description>I found this helpful command while cleaning up my Desktop - I cannot recall where I got it from :-/
git log --since 6.months.ago --numstat | awk &amp;#39;/^[0-9-]+/{ print $NF}&amp;#39; | sort | uniq -c | sort -nr | head This will list the top 10 most often changed files in your git repository.
Why would you want to know this?
Well, several things come to my mind:
you get a quick overview what was changed in the last couple of months this could indicate problems such as a god class, when a file shows up you did not expect What do you think?</description></item><item><title>How to Create an Empty Git Branch</title><link>https://jugmac00.github.io/til/how-to-create-an-empty-git-branch/</link><pubDate>Wed, 12 May 2021 08:05:30 +0200</pubDate><guid>https://jugmac00.github.io/til/how-to-create-an-empty-git-branch/</guid><description>What do I mean by an empty branch?
Simply, a branch with no commits.
Why on earth&amp;hellip; Why would one even need an empty branch?
There are not many reasons which come to my mind, but imagine you start a rewrite of an existing project, and you want to start from scratch, but you want to keep the rewrite in the same repository.
For example tox does this:
the current main version is on master the upcoming version 4, which is a complete rewrite, is on the rewrite branch.</description></item><item><title>How to Globally Gitignore Configuration Files</title><link>https://jugmac00.github.io/til/how-to-globally-gitignore-configuration-files/</link><pubDate>Tue, 27 Apr 2021 08:51:48 +0200</pubDate><guid>https://jugmac00.github.io/til/how-to-globally-gitignore-configuration-files/</guid><description>Until today, I did not make up my mind about what to do with configuration files, created by e.g. VS Code.
Certainly, I do not want to commit them, but putting it into every&amp;rsquo;s repository .gitignore file is also cumbersome - and sometimes it is not possible.
I always do a git add -u to avoid accidentally adding a venv or similar, so it did not really matter.
Except&amp;hellip;
❯ .</description></item><item><title>How to Install a Python Package Directly From a Git Branch From GitHub</title><link>https://jugmac00.github.io/til/how-to-install-a-python-package-directly-from-a-git-branch-from-github/</link><pubDate>Mon, 11 Jan 2021 08:55:54 +0200</pubDate><guid>https://jugmac00.github.io/til/how-to-install-a-python-package-directly-from-a-git-branch-from-github/</guid><description>Bernát Gábor is currently working on a complete rewrite for tox.
I alpha-tested the latest release (4.0.0a2), and reported a couple of problems.
Within a day Bernát published some fixes on the rewrite branch, and asked me to test it.
That means there is no new package on PyPI, yet.
So, I had to install tox directly from GitHub, to be exact, from the rewrite branch:
pip install git+https://github.com/tox-dev/tox@rewrite or more general</description></item><item><title>How to Configure Git for Testing</title><link>https://jugmac00.github.io/til/how-to-configure-git-for-testing/</link><pubDate>Mon, 16 Nov 2020 07:01:19 +0200</pubDate><guid>https://jugmac00.github.io/til/how-to-configure-git-for-testing/</guid><description>batou is a configuration management and deployment tool, comparable to Ansible.
With batou you can deploy applications, also from git repositories.
For this batou uses the git binary - so this has to be tested somehow.
One test looks like this&amp;hellip;
def test_git_remote_init_pull(tmpdir): source = tmpdir.mkdir(&amp;#34;source&amp;#34;) dest = tmpdir.mkdir(&amp;#34;dest&amp;#34;) with source.as_cwd(): remote_core.cmd(&amp;#34;git init&amp;#34;) source.join(&amp;#34;foo.txt&amp;#34;).write(&amp;#34;bar&amp;#34;) remote_core.cmd(&amp;#34;git add foo.txt&amp;#34;) remote_core.cmd(&amp;#34;git commit -m bar&amp;#34;) remote_core.ensure_repository(str(dest), &amp;#34;git-bundle&amp;#34;) remote_core.git_pull_code(str(source), &amp;#34;master&amp;#34;) remote_core.git_update_working_copy(&amp;#34;master&amp;#34;) assert &amp;#34;bar&amp;#34; == dest.join(&amp;#34;foo.txt&amp;#34;).read() &amp;hellip; and worked in some environments, even on Travis, but failed on my Ubuntu box, and later also on GH Actions:</description></item><item><title>How to Remove a File From a Git Repository but Keep It Locally</title><link>https://jugmac00.github.io/til/how-to-remove-a-file-from-a-git-repository-but-keep-it-locally/</link><pubDate>Mon, 10 Aug 2020 09:00:14 +0200</pubDate><guid>https://jugmac00.github.io/til/how-to-remove-a-file-from-a-git-repository-but-keep-it-locally/</guid><description>For a video project, I have a video folder with videos and subtitle files.
Obviously, I do not want to have hundreds of megabytes in my git repository, so I git ignored them - but I committed the subtitles.
Now, the videos and the subtitles will be served by nginx from a media directory, outside of the project.
In order to delete the subtitles from the git repository, but keep them locally, I have to&amp;hellip;</description></item><item><title>How to Fix an Old Git Commit</title><link>https://jugmac00.github.io/til/how-to-fix-an-old-git-commit/</link><pubDate>Mon, 10 Aug 2020 08:03:11 +0200</pubDate><guid>https://jugmac00.github.io/til/how-to-fix-an-old-git-commit/</guid><description>&amp;hellip; which you do not have pushed to a remote repository.
git add &amp;lt;my fixed files&amp;gt; git commit --fixup=OLDCOMMIT git rebase --interactive --autosquash OLDCOMMIT^ via https://twitter.com/nnja/status/796876898005417984?s=03 via https://stackoverflow.com/questions/2719579/how-to-add-a-changed-file-to-an-older-not-last-commit-in-git/27721031#27721031</description></item></channel></rss>